const model = require("../models/vulnerabilityModel.js");
const gameUserModel = require("../models/GameUsersModel.js");

// Create a new vulnerability
module.exports.createVulnerability = (req, res, next) => {
    if (!req.body.type) {
        return res.status(400).json({ message: "Vulnerability type is required" });
    }

    if (!req.body.description) {
        return res.status(400).json({ message: "Description is required" });
    }

    const userId = res.locals.userId;
    const type = req.body.type;
    const description = req.body.description;

    // Get gameuser ID first
    const callbackGetGameUser = (error, results) => {
        if (error) {
            console.error("Error getting gameuser:", error);
            return res.status(500).json(error);
        }
        
        if (results.length === 0) {
            return res.status(404).json({ message: "Game user not found" });
        }

        const gameUserId = results[0].id;

        // Determine points based on vulnerability type
        let points = 50; // default
        switch(type) {
            case 'XSS': points = 50; break;
            case 'SQL Injection': points = 100; break;
            case 'CSRF': points = 80; break;
            case 'Open Redirect': points = 20; break;
            case 'IDOR': points = 90; break;
            case 'XXE': points = 95; break;
            case 'SSRF': points = 85; break;
            case 'Command Injection': points = 110; break;
            default: points = 50;
        }

        const vulnerabilityData = {
            type: type,
            description: description,
            points: points,
            created_by: gameUserId
        };

        const callback = (error, results) => {
            if (error) {
                console.error("Error creating vulnerability:", error);
                return res.status(500).json({ message: "Failed to create vulnerability" });
            }

            res.status(201).json({
                message: "Vulnerability created successfully",
                vulnerability_id: results.insertId,
                type: type,
                points: points,
                description: description
            });
        };

        model.CreateVulnerability(vulnerabilityData, callback);
    };

    gameUserModel.selectByUserId({ user_id: userId }, callbackGetGameUser);
};

// Get all vulnerabilities (for report page)
module.exports.getAllVulnerabilities = (req, res, next) => {
    const callback = (error, results) => {
        if (error) {
            console.error("Error getting all vulnerabilities:", error);
            return res.status(500).json(error);
        }
        res.status(200).json(results);
    };

    model.GetAllVulnerabilities(callback);
};

// Get user's created vulnerabilities
module.exports.getUserVulnerabilities = (req, res, next) => {
    const userId = res.locals.userId;

    const callbackGetGameUser = (error, results) => {
        if (error) {
            console.error("Error getting gameuser:", error);
            return res.status(500).json(error);
        }
        
        if (results.length === 0) {
            return res.status(404).json({ message: "Game user not found" });
        }

        const gameUserId = results[0].id;

        const callback = (error, results) => {
            if (error) {
                console.error("Error getting user vulnerabilities:", error);
                return res.status(500).json(error);
            }
            res.status(200).json(results);
        };

        model.GetUserVulnerabilities({ created_by: gameUserId }, callback);
    };

    gameUserModel.selectByUserId({ user_id: userId }, callbackGetGameUser);
};

// Submit a report on a vulnerability
module.exports.submitReport = (req, res, next) => {
    if (!req.body.vulnerability_id) {
        return res.status(400).json({ message: "Vulnerability ID is required" });
    }

    const userId = res.locals.userId;
    const vulnerabilityId = parseInt(req.body.vulnerability_id);
    const description = req.body.description || "Report submitted via report page";

    const callbackGetGameUser = (error, results) => {
        if (error) {
            console.error("Error getting gameuser:", error);
            return res.status(500).json(error);
        }
        
        if (results.length === 0) {
            return res.status(404).json({ message: "Game user not found" });
        }

        const gameUserId = results[0].id;

        // Check if the vulnerability exists
        const callbackCheckVuln = (error, vulnResults) => {
            if (error) {
                console.error("Error checking vulnerability:", error);
                return res.status(500).json({ message: "Error checking vulnerability" });
            }

            if (vulnResults.length === 0) {
                return res.status(404).json({ message: "Vulnerability not found" });
            }

            const vulnerability = vulnResults[0];
            const xpReward = vulnerability.points;

            // Check if user already reported this vulnerability
            const callbackCheckExisting = (error, existingResults) => {
                if (error) {
                    console.error("Error checking existing report:", error);
                    return res.status(500).json({ message: "Error checking existing reports" });
                }

                if (existingResults.length > 0) {
                    return res.status(400).json({ message: "You have already reported this vulnerability" });
                }

                // Create the report
                const reportData = {
                    user_id: gameUserId,
                    vulnerability_id: vulnerabilityId,
                    description: description
                };

                const callbackCreateReport = (error, reportResults) => {
                    if (error) {
                        console.error("Error creating report:", error);
                        return res.status(500).json({ message: "Failed to create report" });
                    }

                    // Award XP to user
                    const callbackUpdateXP = (error, updateResults) => {
                        if (error) {
                            console.error("Error updating XP:", error);
                            return res.status(500).json({ message: "Report created but failed to update XP" });
                        }

                        // Get updated user data
                        const callbackGetUpdatedUser = (error, updatedUserResults) => {
                            if (error) {
                                console.error("Error getting updated user:", error);
                                return res.status(500).json({ message: "Report submitted but failed to get updated data" });
                            }
                            
                            const newXP = updatedUserResults[0].XP;
                            res.status(201).json({
                                message: "Report submitted successfully",
                                report_id: reportResults.insertId,
                                vulnerability_type: vulnerability.type,
                                xp_earned: xpReward,
                                new_xp: newXP,
                                description: description
                            });
                        };

                        gameUserModel.selectById({ id: gameUserId }, callbackGetUpdatedUser);
                    };

                    model.UpdateReputation({ id: gameUserId, reputation: xpReward }, callbackUpdateXP);
                };

                model.CreateReport(reportData, callbackCreateReport);
            };

            model.CheckExistingReport({ user_id: gameUserId, vulnerability_id: vulnerabilityId }, callbackCheckExisting);
        };

        model.GetVulnerabilityById({ id: vulnerabilityId }, callbackCheckVuln);
    };

    gameUserModel.selectByUserId({ user_id: userId }, callbackGetGameUser);
};