const pool = require('../services/db');

// Get vulnerability by ID
module.exports.GetVulnerabilityById = (data, callback) => {
    const SQLSTATEMENT = `
    SELECT id, type, points
    FROM vulnerability
    WHERE id = ?
    `;
    const VALUES = [data.id];
    pool.query(SQLSTATEMENT, VALUES, callback);
};

// Create a new vulnerability
module.exports.CreateVulnerability = (data, callback) => {
    const SQLSTATEMENT = `
    INSERT INTO vulnerability (type, description, points, created_by, created_at)
    VALUES (?, ?, ?, ?, NOW())
    `;
    const VALUES = [data.type, data.description, data.points, data.created_by];
    pool.query(SQLSTATEMENT, VALUES, callback);
};

// Get all vulnerabilities (for report page)
module.exports.GetAllVulnerabilities = (callback) => {
    const SQLSTATEMENT = `
    SELECT v.id, v.type, v.description, v.points, v.created_at,
           gu.username as created_by_username
    FROM vulnerability v
    LEFT JOIN gameuser gu ON v.created_by = gu.id
    ORDER BY v.created_at DESC
    `;
    pool.query(SQLSTATEMENT, callback);
};

// Get user's created vulnerabilities
module.exports.GetUserVulnerabilities = (data, callback) => {
    const SQLSTATEMENT = `
    SELECT id, type, description, points, created_at
    FROM vulnerability
    WHERE created_by = ?
    ORDER BY created_at DESC
    `;
    const VALUES = [data.created_by];
    pool.query(SQLSTATEMENT, VALUES, callback);
};

// Create a report
module.exports.CreateReport = (data, callback) => {
    const SQLSTATEMENT = `
    INSERT INTO report (user_id, vulnerability_id, description)
    VALUES (?, ?, ?)
    `;
    const VALUES = [data.user_id, data.vulnerability_id, data.description];
    pool.query(SQLSTATEMENT, VALUES, callback);
};

// Check if user already reported this vulnerability
module.exports.CheckExistingReport = (data, callback) => {
    const SQLSTATEMENT = `
    SELECT id FROM report
    WHERE user_id = ? AND vulnerability_id = ?
    `;
    const VALUES = [data.user_id, data.vulnerability_id];
    pool.query(SQLSTATEMENT, VALUES, callback);
};

// Updated to work with GameUser XP instead of User reputation
module.exports.UpdateReputation = (data, callback) => {
    const SQLSTATEMENT = `
    UPDATE gameuser
    SET XP = XP + ?
    WHERE id = ?
    `;
    const VALUES = [data.reputation, data.id]; // reputation here means XP points to add
    pool.query(SQLSTATEMENT, VALUES, callback);
};

// Get user's reports with vulnerability details
module.exports.getUserReports = (data, callback) => {
    const SQLSTATEMENT = `
    SELECT r.id, r.status, r.user_id, r.description, v.type AS vulnerability_type, v.points, 
        r.created_at
    FROM report r
    JOIN vulnerability v ON r.vulnerability_id = v.id
    WHERE r.user_id = ?
    ORDER BY r.created_at DESC
    `;
    const VALUES = [data.user_id];
    pool.query(SQLSTATEMENT, VALUES, callback);
};