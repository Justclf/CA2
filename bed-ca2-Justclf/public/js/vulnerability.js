document.addEventListener('DOMContentLoaded', function() {
    const token = localStorage.getItem('token');
    
    if (!token) {
        alert('Please log in to create vulnerabilities');
        window.location.href = 'login.html';
        return;
    }
    
    // Load user profile and created vulnerabilities
    loadUserProfile(token);
    loadUserVulnerabilities(token);
    
    // Setup form submission for CREATING vulnerabilities
    setupVulnerabilityForm(token);
});

// Get the profile
function loadUserProfile(token) {
    const callback = (responseStatus, responseData) => {
        console.log("User profile responseStatus:", responseStatus);
        console.log("User profile responseData:", responseData);

        if (responseStatus === 200) {
            document.getElementById("currentHunter").textContent = responseData.username;
            document.getElementById("currentXP").textContent = responseData.xp;
            document.getElementById("currentRank").textContent = responseData.rank;
        } else {
            console.error("Failed to load user profile:", responseData);
            document.getElementById("currentHunter").textContent = "Unknown";
            document.getElementById("currentXP").textContent = "0";
            document.getElementById("currentRank").textContent = "E-Hunter";
        }
    }
    fetchMethod(currentUrl + "/api/profile", callback, "GET", null, token);
}

// Create function for setting up vulnerability creation form
function setupVulnerabilityForm(token) {
    const vulnForm = document.getElementById('vulnerabilityForm');
    
    if (vulnForm) {
        vulnForm.addEventListener('submit', function(event) {
            event.preventDefault();
            
            const vulnerabilityType = document.getElementById('vulnerabilityType').value;
            const description = document.getElementById('vulnerabilityDescription').value;
            
            if (!vulnerabilityType) {
                alert('Please select a vulnerability type');
                return;
            }

            if (!description) {
                alert('Please provide a description of the vulnerability');
                return;
            }

            if (description.length < 10) {
                alert('Description must be at least 10 characters long');
                return;
            }
            
            const data = {
                type: vulnerabilityType,
                description: description
            };
            
            const callback = (responseStatus, responseData) => {
                console.log("Create vulnerability responseStatus:", responseStatus);
                console.log("Create vulnerability responseData:", responseData);
                
                if (responseStatus === 201) {
                    alert("Vulnerability created successfully! ID: " + responseData.vulnerability_id);
                    vulnForm.reset();
                    loadUserVulnerabilities(token); // Refresh vulnerability list
                } else {
                    alert(responseData.message || 'Failed to create vulnerability. Please try again.');
                }
            }
            
            fetchMethod(currentUrl + "/api/vulnerability/create", callback, "POST", data, token);
        });
    }
}

// Function to load user's created vulnerabilities
function loadUserVulnerabilities(token) {
    const callback = (responseStatus, responseData) => {
        console.log("User vulnerabilities responseStatus:", responseStatus);
        console.log("User vulnerabilities responseData:", responseData);
        
        if (responseStatus === 200) {
            displayVulnerabilities(responseData);
        } else {
            console.error("Failed to load user vulnerabilities:", responseData);
            showNoVulnerabilities("Failed to load your vulnerabilities.");
        }
    }
    
    fetchMethod(currentUrl + "/api/vulnerability/user", callback, "GET", null, token);
}

// Function to display vulnerabilities
function displayVulnerabilities(vulnerabilities) {
    const vulnList = document.getElementById('vulnerabilityList');
    
    if (!vulnerabilities || vulnerabilities.length === 0) {
        showNoVulnerabilities("No vulnerabilities created yet. Create your first vulnerability above!");
        return;
    }
    
    vulnList.innerHTML = vulnerabilities.map(vuln => {
        const createdDate = new Date(vuln.created_at).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
        });
        
        return `
            <div class="vulnerability-item">
                <div class="vuln-header">
                    <div class="vuln-id">ID: ${vuln.id}</div>
                    <div class="vuln-points">+${vuln.points} XP</div>
                </div>
                <div class="vuln-type">${vuln.type}</div>
                <div class="vuln-description">
                    <span class="vuln-description-label">Description:</span>
                    ${vuln.description}
                </div>
                <div class="vuln-date">Created: ${createdDate}</div>
            </div>
        `;
    }).join('');
}

function showNoVulnerabilities(message) {
    const vulnList = document.getElementById('vulnerabilityList');
    vulnList.innerHTML = `<div class="no-vulnerabilities"><p>${message}</p></div>`;
}